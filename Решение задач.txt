Описание
Дан ориентированный граф, вершины которого обозначены именами. Максимальная
длина имени два символа. Требуется определить всех соседей заданной вершины, то есть те
вершины, которые соединены дугой с заданной.
Формат входных данных
Первая строка входного файла содержит целое число N — количество вершин в
исходном графе (1 ≤ N ≤ 300). Следующие N строк содержат описания всех вершин, где
сначала задано имя вершины затем количество исходящих дуг этой вершины и имена
конечных вершин исходящих дуг. В последней строке задано имя вершины, для которой
нужно определить соседей.
Формат выходных данных
Первая строка – перечисление имен вершин в лексикографическом порядке, дуги
которых входят в заданную вершину, разделенные одним пробелом. Вторая строка -
перечисление имен вершин в лексикографическом порядке, дуги которых исходят из
заданной вершины разделены одним пробелом.
Выходной файл не содержит лишних пробелов. (Если к примеру отсутствуют исходящие
дуги, то выводить просто “out:” без лишнего пробела)
Примеры

Test.in Test.out

6
s 1 a
f 1 a
a 1 d
d 1 b
b 1 c
c 1 a
a

in: c f s
out: d

#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>
#include <algorithm>

using namespace std;

int main()
{
    int n;
    cin >> n;
    unordered_map<string, vector<string>> out;
    unordered_map<string, vector<string>> in;
    vector<string> vertices(n);
    for (int i = 0; i < n; i++)
    {
        string vertex;
        int outgoing_count;
        cin >> vertex >> outgoing_count;
        vertices[i] = vertex;
        out[vertex] = vector<string>();
        for (int j = 0; j < outgoing_count; j++)
        {
            string outgoing_vertex;
            cin >> outgoing_vertex;
            out[vertex].push_back(outgoing_vertex);
            in[outgoing_vertex].push_back(vertex);
        }
    }
    string target_vertex;
    vector<string> input, output;
    cin >> target_vertex;
    if (in.find(target_vertex) != in.end() && !in[target_vertex].empty())
        for (auto v : in[target_vertex])
            input.push_back(v);
    if (out.find(target_vertex) != out.end() && !out[target_vertex].empty())
        for (auto v : out[target_vertex])
            output.push_back(v);
    sort(input.begin(), input.end());
    sort(output.begin(), output.end());
    cout << "in:";
    for (auto v : input)
        cout << " " << v;
    cout << endl;
    cout << "out:";
    for (auto v : output)
        cout << " " << v;
}

Вам задается строка 
s
, состоящая из 
n
 заглавных латинских букв. Так как это тяжелая задача HAAARD, то вы хотите удалить из этой строки какие-то символы так, чтобы в конце осталось слово HARD с как можно большим количеством букв A подряд. Вы можете удалять буквы из любого места строки, но не можете менять оставшиеся буквы местами. (По сути вы можете взять любую подпоследовательность символов строки 
s
).

Входные данные
В первой строке задается одно целое число 
n
 
(
1
⩽
n
⩽
10
5
)
 – длина строки 
s
.

Во второй строке задается строка 
s
, состоящая из 
n
 заглавных латинских букв.

Выходные данные
Выведите слово HARD c максимально возможным количеством букв A, которое может быть получено описанным способом. (HARD, HAARD, HAAARD и т.д.)

Если нельзя получить даже слово HARD с одной буквой A, то выведите вместо этого EASY.

Примеры
Входные данные
10
AHARAVARAD
Выходные данные
HAAARD
Входные данные
11
ITSNOTSOHRD
Выходные данные
EASY

#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main()
{
    string s, s2;
    bool fl1 = 0, fl2 = 0, fl3 = 0;
    long long n, counter = 0, index1 = -1, index2 = -1;
    cin >> n >> s;
    for (int i = n - 1; i > 0; i--)
    {
        if (s[i] == 'D')
            fl2 = 1;
        if (s[i] == 'R' && fl2 == 1)
        {
            index2 = i;
            break;
        }
    }
    for (int i = 0; i < index2; i++)
    {
        if (s[i] == 'H')
        {
            index1 = i;
            fl1 = 1;
        }
        if (s[i] == 'A' && fl1 == 1)
        {
            fl3 = 1;
            break;
        }
    }
    if (index1 == -1 || index2 == -1 || fl3 == 0 || fl2 == 0)
    {
        cout << "EASY";
        return 0;
    }
    cout << "H";
    for (int i = index1; i < index2; i++)
        if (s[i] == 'A')
            cout << "A";
    cout << "RD" << endl;
}

Вам задан взвешенный неориентированный граф с 
N
 вершинами и 
M
 ребрами.

Найдите длину кратчайшего пути от вершины 
1
 до вершины 
N
.

Взвешенный граф — это граф, в котором каждое ребро имеет вес. Длина пути — это сумма весов ребер, входящих в этот путь. Кратчайший путь — это путь с минимальной длиной. Неориентированный граф — это граф, в котором ребра не имеют направления, переходить по ним можно в обе стороны (как от 
A
i
 до 
B
i
, так и от 
B
i
 до 
A
i
).

Входные данные
Первая строка содержит два целых числа: 
N
 и 
M
. 
(
2
⩽
N
⩽
100
;
0
⩽
M
⩽
N
⋅
(
N
−
1
)
/
2
)

Далее следуют 
M
 строк, каждая из которых содержит по три числа 
A
i
,
B
i
,
C
i
, описывающих ребро от вершины 
A
i
 до вершины 
B
i
 с весом 
C
i
. 
(
1
⩽
A
i
<
B
i
⩽
N
;
1
⩽
C
i
⩽
100
)

Каждая пара вершин соединена не более чем одним ребром. Никакая вершина не соединена сама с собой.

Выходные данные
Выведите одно число: длину кратчайшего пути от вершины 
1
 до вершины 
N
. Если пути не существует, то выведите 
0
.

Пример
Входные данные
3 3
1 2 10
2 3 10
1 3 19
Выходные данные
19

#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge
{
    int to, weight;
};

int dijkstra(const vector<vector<Edge>>& graph, int start, int end)
{
    vector<int> distance(graph.size(), INF);
    distance[start] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({ 0, start });
    while (!pq.empty())
    {
        int u = pq.top().second;
        int dist = pq.top().first;
        pq.pop();
        if (dist > distance[u])
            continue;
        for (const Edge& edge : graph[u])
        {
            int v = edge.to;
            int weight = edge.weight;
            if (distance[u] + weight < distance[v])
            {
                distance[v] = distance[u] + weight;
                pq.push({ distance[v], v });
            }
        }
    }
    return (distance[end] == INF) ? 0 : distance[end];
}

int main()
{
    int n, m;
    cin >> n >> m;
    vector<vector<Edge>> graph(n + 1);
    for (int i = 0; i < m; ++i)
    {
        int a, b, c;
        cin >> a >> b >> c;
        graph[a].push_back({ b, c });
        graph[b].push_back({ a, c });
    }
    int result = dijkstra(graph, 1, n);
    cout << result << endl;
}